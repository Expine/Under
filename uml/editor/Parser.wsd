@startuml EditorParser

package editor {
    package ed_stage {
        package ed_parser {
            class EditorStageParser {
                #makeEditor() : EditorBase
                #makeBaseStage(stage) : Stage <<override>>
                #makeBackground(back) : Background <<override>>
                #makeBaseCamera(camera) : Camera <<override>>
                #makeBaseWorld(stage,world) : PhysicalWorld <<override>>
                #makeEntityFactory(stage) : EntityFactory <<override>>
                +parse(ilePath,width,height) : Stage <<override>>
            }
        }
    }
}

package game {
    package ga_event {
        class UnderEventBuilder
    }
    package ga_stage {
        package ga_parser {
            class UnderStageParser
            class UnderTileBuilder
            class UnderCharacterBuilder
        }
    }
}
package editor {
    package ed_stage {
        interface IEditable
        class EditorStage
        package ed_back {
            class EditorBackground
        }
        package ed_edit {
            class SimpleEditor
        }
        package ed_camera {
            class EditorCamera
        }
        package ed_physics {
            class EditorWorld
        }
        package ed_parser {
            class EditorEntityFactory
        }
    }
}

SimpleEditor <.. EditorStageParser : Generate
EditorStage <.. EditorStageParser : Generate
EditorBackground <.. EditorStageParser : Generate
EditorCamera <.. EditorStageParser : Generate
EditorWorld <.. EditorStageParser : Generate
EditorEntityFactory <.. EditorStageParser : Generate
UnderTileBuilder <... EditorStageParser : Generate
UnderCharacterBuilder <... EditorStageParser : Generate
UnderEventBuilder <... EditorStageParser : Generate
IEditable <.. EditorStageParser : Set

UnderStageParser <|--- EditorStageParser

@enduml
