@startuml EditorParser

package editor {
    package ed_event {
        class EditorEventBuilder {
            +build(json) <<override>>
        }
    }
    package ed_stage {
        package ed_builder {
            class EditBuilder {
                {abstract} +build() : EditorBase
            }
            class SimpleEditorBuilder {
                #makeImage(image) : GameImage
                #makeTools(base)
                #makeEditorBase() : EditorBase
                +build() : EditorBase <<override>>
            }
        }
        package ed_parser {
            class EditorStageParser {
                #editBuilder : EditBuilder
                #makeBaseStage(stage) : Stage <<override>>
                #makeBackground(back) : Background <<override>>
                #makeBaseCamera(camera) : Camera <<override>>
                #makeBaseWorld(stage,world) : PhysicalWorld <<override>>
                #makeEntityFactory(stage) : EntityFactory <<override>>
                +parse(ilePath,width,height) : Stage <<override>>
            }
        }
        class EditorTileBuilder {
            +build(deploy,json) : Entity <<override>>
        }
        class EditorCharacterBuilder {
            +build(deploy,json) : Entity <<override>>
        }
        class EditorEntityFactory {
            +getTileInfo() : Object<number,JSON> <<override>>
            +getEntityInfo() : Object<number,JSON> <<override>>
            #buldChipSerial(data,chip) <<override>>
            +build(id,deploy) <<override>>
        }
        interface IEditorInfo {
            {abstract} +getTileInfo() : Object<number,JSON>
            {abstract} +getEntityInfo() : Object<number,JSON>
        }
    }
}

package under {
    package base {
        package input {
            interface IKey
        }
    }
    package extend {
        package ex_resource {
            package ex_image {
                class SimpleImage
            }
        }
        package ex_stage {
            abstract DelegateStage
            package ex_parser {
                class JSONEntityFactory
            }
        }
    }
}

package game {
    package ga_event {
        class UnderEventBuilder
    }
    package ga_stage {
        package ga_parser {
            class UnderStageParser
            class UnderTileBuilder
            class UnderCharacterBuilder
        }
    }
}
package editor {
    package ed_event {
        class EditorEvent
    }
    package ed_stage {
        interface IEditable
        class EditorStage
        package ed_back {
            class EditorBackground
        }
        package ed_edit {
            class SimpleEditor
            package ed_tool {
                class PencilTool
                class EraseTool
                class SyringeTool
                class PaintTool
                class AutoTileTool
            }
        }
        package ed_entity {
            class EditorTile
            class EditorDeployer
        }
        package ed_camera {
            class EditorCamera
        }
        package ed_physics {
            class EditorWorld
        }
    }
}

SimpleEditorBuilder <.. EditorStageParser : Default
EditorStage <.. EditorStageParser : Generate
EditorBackground <.. EditorStageParser : Generate
EditorCamera <.. EditorStageParser : Generate
EditorWorld <.. EditorStageParser : Generate
EditorEntityFactory <... EditorStageParser : Generate
EditorTileBuilder <..... EditorStageParser : Generate
EditorCharacterBuilder <..... EditorStageParser : Generate
EditorEventBuilder <..... EditorStageParser : Generate
DelegateStage <.. EditorStageParser : Judge
IEditable <.. EditorStageParser : Set
EditBuilder <.. EditorStageParser : Build

EditorTileBuilder ..> EditorTile : Generate
EditorCharacterBuilder ..> EditorDeployer : Generate

SimpleImage <.... SimpleEditorBuilder : Generate
SimpleEditor <.. SimpleEditorBuilder : Generate
PencilTool <.. SimpleEditorBuilder : Generate
EraseTool <.. SimpleEditorBuilder : Generate
SyringeTool <.. SimpleEditorBuilder : Generate
PaintTool <.. SimpleEditorBuilder : Generate
AutoTileTool <.. SimpleEditorBuilder : Generate
IKey <.... SimpleEditorBuilder : Get

EditorEventBuilder ..> EditorEvent : Generate

UnderStageParser <|--- EditorStageParser
EditBuilder <|. SimpleEditorBuilder
UnderTileBuilder <|-- EditorTileBuilder
UnderCharacterBuilder <|-- EditorCharacterBuilder
JSONEntityFactory <|---- EditorEntityFactory
IEditorInfo <|.. EditorEntityFactory
UnderEventBuilder <|-- EditorEventBuilder

@enduml
