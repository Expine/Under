@startuml EditorScene

package editor {
    package ed_scene {
        class EditorScene {
            #stageManager : StageManager
            #eventManager : EventManager
            #chipData : IEditorSave
            #entityData : IEditorSave
            #saveTarget : IEditorSave
            +init() <<override>>
            +update(dt) <<override>>
            +render(ctx) <<override>>
        }
    }
}

package under {
    package base {
        package event {
            abstract EventManager
        }
        package input {
            interface IKey
        }
        package resource {
            package image {
                abstract Context
                interface IImageManager
            }
        }
        package screen {
            abstract GameScreen
        }
        package stage {
            abstract StageManager
        }
    }
    package extend {
        package ex_event {
            class QueueEventManager
        }
        package ex_scene {
            package ex_layer {
                class FloatLayer
                class DragScrollLayer
            }
            class BaseLayeredScene
        }
    }
    package debug {
        package de_scene {
            package de_layer {
                class DebugLayer
            }
        }
        class VolatileDebugger
    }
}

package editor {
    package ed_scene {
        package ed_layer {
            class ChipLayer
            class EntityLayer
        }
    }
    package ed_stage {
        class EditorStageManager
        interface IEditable
        interface IEditorSave
        package ed_parser {
            class EditorStageParser
        }
    }
}

EditorStageManager <.. EditorScene : Generate
EditorStageParser <.. EditorScene : Generate
QueueEventManager <... EditorScene : Generate
EditorScene ..> ChipLayer  : Generate
EditorScene ..> EntityLayer  : Generate entity
FloatLayer <... EditorScene : Generate
DragScrollLayer <... EditorScene : Generate
DebugLayer <... EditorScene : Generate
VolatileDebugger <... EditorScene : Generate

GameScreen <... EditorScene : Get size
IKey <... EditorScene : Get key
StageManager <... EditorScene : Init and update, render
EventManager <... EditorScene : Update and render
IEditable <.. EditorScene : Set
IEditorSave <.. EditorScene : Save
IImageManager <... EditorScene : Reload
Context <... EditorScene : Render

BaseLayeredScene <|-- EditorScene

@enduml
