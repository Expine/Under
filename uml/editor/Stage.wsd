@startuml EditorStage

package editor {
    package ed_stage {
        class EditorStage {
            +constructor(stage,tileFiles,entityFiles)
            #tileFiles : Array<string>
            #entityFile : Array<string>
            #playMode : boolean
            #saveData : string
            #preCamera : Camera
            #editorEntities : Array<IEditorEntity>
            #editor : EditorBase
            +restore()
            +getSaveData() : JSON <<override>>
            +setTileSelection(selection) <<override>>
            +setEntitySelection(selection) <<override>>
            +paint(x,y,id) <<override>>
            +getID(x,y) : number <<override>>
            +addEntitybyID(id,deploy,init) : Entity <<override>>
            +addEntiy(entity) <<override>>
            +removeEntity(entity) <<override>>
            +removeEntityImmediately(entity) <<override>>
            +update(dt) <<override>>
            +redner(ctx, shiftX, shiftY) <<override>
        }
    }
}

package under {
    package base {
        package input {
            interface IKey
            interface IMouse
        }
        package stage {
            package camera {
                abstract DelegateCamera
            }
            package parser {
                abstract EntityFactory
            }
            package entity {
                package interface {
                    interface IPlayable
                }
                abstract Entity
            }
        }
    }
    package debug {
        package de_stage {
            class DebugStage
        }
    }
    package extend {
        package ex_stage {
            package ex_entity {
                class TileObject
            }
        }
    }
}

package editor {
    package ed_stage {
        interface IEditorSave
        interface IEditable
        package ed_edit {
            package ed_base {
                abstract EditorBase
                interface IEditorTarget
            }
        }
        package ed_parser {
            interface IEditorInfo
        }
        package ed_entity {
            class EditorTile
            class EditorDeployer
            package ed_interface {
                interface IEditorEntity
            }
        }
    }
}

TileObject <... EditorStage : Judge
IEditorEntity <.. EditorStage : Get and save
EditorBase <.. EditorStage : Init, update, render
IEditorInfo <.. EditorStage : Get
EntityFactory <... EditorStage : Temp make
EditorStage ..> EditorTile : Generate
EditorStage ..> EditorDeployer : Generate
Entity <... EditorStage : Update
IKey <... EditorStage : Get
IMouse <... EditorStage : Get
IPlayable <... EditorStage : Judge and get
DelegateCamera <... EditorStage : Init and get

DebugStage <|-- EditorStage
IEditorSave <|.. EditorStage
IEditable <|.. EditorStage
IEditorTarget <|.. EditorStage

@enduml
