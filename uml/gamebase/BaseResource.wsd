@startuml GameBaseBaseResource

package under {
    package base {
        package resources {
            abstract ResourceManager {
                constructor(root)
                #root : string
                {static} +image : IImageManager
                {static} +music : IMusicManager
            }
            interface IResourceManager {
                {abstract} +load(filePath) : Object
                {abstract} +unload(id)
                {abstract} +reload
                {abstract} +getPath(id) : string
            }
            interface IImageManager {
                {abstract} +getWidth(id) : number
                {abstract} +getHeight(id) : number
                {abstract} +getImage(id) : Image
            }
            interface IMusicManager {
                {abstract} +getMusic(id) : BufferSource
            }

            package music {
                abstract Music {
                    #music : IMusicManager
                    {static} +it : Music /' Singleton '/
                    +setMusicManager(musicManager)
                    {abstract} +playSE(musicID)
                    {abstract} +playBGM(musicID)
                    {abstract} +pauseBGM()
                    {abstract} +resumeBGM()
                    {abstract} +stopBGM()
                }
            }

            package image {
                abstract Context {
                    #screen : GameScreen
                    #image : IImageManager
                    +setScreen(screen)
                    +setImageManager(imageManager)
                    {abstract} +init()
                    {abstract} +preRendering()
                    {abstract} +postRendering()
                    {abstract} +measureText(text,size,font)
                    {abstract} +fillText(text,x,y,anchorX,anchorY,size,color,font)
                    {abstract} +strokeLine(sx,sy,ex,ey,color,lineWidth)
                    {abstract} +strokeCircle(x,y,radius,startAngle,endAngle,anticlockwise,color,lineWidth)
                    {abstract} +strokeRect(x,y,width,height,color,lineWidth)
                    {abstract} +fillRect(x,y,width,height,color,lineWidth)
                    {abstract} +drawImage(imageID,x,y,width,height,srcX,srcY,srcW,srcH)
                }

                interface IClipImage {
                    {abstract} +setClipArea(clipX,clipY,clipWidth,clipHeight)
                }
                interface IDirectionalImage {
                    {abstract} +setDirection(directionX,directionY)
                }

                abstract GameImage {
                    {abstract} +setSize(width,height)
                    {abstract} +setImageID(imageID)
                    {abstract} +getImageID() : number
                    {abstract} +getWidth() : number
                    {abstract} +getHeight() : number
                    {abstract} +getSourceOffsetX() : number
                    {abstract} +getSourceOffsetY() : number
                    {abstract} +getSourceWidth() : number
                    {abstract} +getSourceHeight() : number
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +render(ctx,x,y)
                }

                abstract GameAnimation {
                    {abstract} +isLoop() : boolean
                    {abstract} +isEnded() : boolean
                    {abstract} +pause()
                    {abstract} +restore()
                    {abstract} +getAnimationCount() : number
                    {abstract} +addAnimation(image,delta)
                    {abstract} +getImages() : Array<GameImage>
                    {abstract} +getCurrentImage() : GameImage
                    +setSize(width,height) <<override>>
                    +setImageID(imageID) <<override>>
                    +getImageID() : number <<override>>
                    +getWidth() : number <<override>>
                    +getHeight() : number <<override>>
                    +getSourceOffsetX() : number <<override>>
                    +getSourceOffsetY() : number <<override>>
                    +getSourceWidth() : number <<override>>
                    +getSourceHeight() : number <<override>>
                    +init() <<override>>
                    +update(dt) <<override>>
                    +render(ctx,x,y) <<override>>
                }
                abstract MultiAnimation {
                    {abstract} +getAnimation() : GameAnimation
                    {abstract} +getAnimations() : Array<GameAnimation>
                    {abstract} +setAnimation(animation)
                    +setAllSize(width,height)
                    +setAllImageID(imageID)
                    +isLoop() : boolean <<override>>
                    +isEnded() : boolean <<override>>
                    +pause() <<override>>
                    +restore() <<override>>
                    +getAnimationCount() : number <<override>>
                    +addAnimation(image,delta) <<override>>
                    +getImages() : Array<GameImage> <<override>>
                    +getCurrentImage() : GameImage <<override>>
                    +init() <<override>>
                    +update(dt) <<override>>
                    +render(ctx,x,y) <<override>>
                }
                abstract NamedAnimation {
                    {abstract} +setName(name)
                }
            }
        }
    }
}

package under {
    package base {
        package screen {
            abstract GameScreen
        }
    }
}

Context "1"*-- "1" GameScreen : Own

Context "1"*-- "1" IImageManager : Own
Music "1"*-- "1" IMusicManager : Own
ResourceManager --> IImageManager : Singleton
ResourceManager --> IMusicManager : Singleton

IResourceManager <|-- ResourceManager
IResourceManager <|-- IImageManager
IResourceManager <|-- IMusicManager

GameImage <|-- GameAnimation
GameAnimation <|.. MultiAnimation
MultiAnimation <|-- NamedAnimation

@enduml
