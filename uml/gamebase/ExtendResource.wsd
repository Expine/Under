@startuml GameBaseExtendResource

package under {
    package extend {
        package ex_resource {
            abstract CachedArrayManager {
                #resources : Array<Object>
                #caches : Object<string, Object>
                {abstract} #loadResource(filePath) : Object
                +load(filePath) : number <<override>>
                +unload(id) <<override>>
                +reload <<override>>
                +getPath(id) : string <<override>>
            }
            class CachedImage {
                #loadResource(filePath) : Image <<override>>
                +getWidth(id) : number <<override>>
                +getHeight(id) : number <<override>>
                +getImage(id) : Image <<override>>
            }
            class CachedMusic {
                #context : AudioContext
                #loadResource(filePath) : Object <<override>>
                +getMusic(id) : BufferSource <<override>>
            }
            package ex_music {
                class BufferSourceMusic {
                    -music_ : Array<BufferSource>
                    -bgmList_ : Array<number>
                    -context_ : AudioContext
                }
            }

            package ex_image {
                class JSContext {
                    -_fontColor : string
                    -_fontSize : number
                    -_fontName : string
                    -_lineColor : string
                    -_lineWidth : number
                    #ctx : CanvasRenderingContext2D
                    +init() <<override>>
                    +preRendering() <<override>>
                    +postRendering() <<override>>
                    +measureText(text,size,font) <<override>>
                    +fillText(text,x,y,anchorX,anchorY,size,color,font) <<override>>
                    +strokeLine(sx,sy,ex,ey,color,lineWidth) <<override>>
                    +strokeCircle(x,y,radius,startAngle,endAngle,anticlockwise,color,lineWidth) <<override>>
                    +strokeRect(x,y,width,height,color,lineWidth) <<override>>
                    +fillRect(x,y,width,height,color,lineWidth) <<override>>
                    +drawImage(imageID,x,y,width,height,srcX,srcY,srcW,srcH) <<override>>
                }
                class GLContext {
                    -gl_ : WebGLRenderingContext
                }
                class SingleImage {
                    #imageID : number
                    #width : number
                    #height : number
                    +setSize(width,height) <<override>>
                    +setImageID(imageID) <<override>>
                    +getImageID() : number <<override>>
                    +getWidth() : number <<override>>
                    +getHeight() : number <<override>>
                    +getSourceOffsetX() : number <<override>>
                    +getSourceOffsetY() : number <<override>>
                    +getSourceWidth() : number <<override>>
                    +getSourceHeight() : number <<override>>
                    +update(dt) <<override>>
                    +render(ctx,x,y) <<override>>
                }
                class TileImage {
                    #srcX : number
                    #srcY : number
                    #srcW : number
                    #srcH : number
                    +getSourceOffsetX() : number <<override>>
                    +getSourceOffsetY() : number <<override>>
                    +getSourceWidth() : number <<override>>
                    +getSourceHeight() : number <<override>>
                    +render(ctx,x,y) <<override>>
                }
                class SingleAnimation {
                    #animation : Array<GameImage>
                    #deltas : Array<number>
                    #animationCount : number
                    #runningAnimarion : number
                    #loop : boolean
                    #ended : boolean
                    #paused : boolean
                    +isLoop() : boolean <<override>>
                    +isEnded() : boolean <<override>>
                    +pause() <<override>>
                    +restore() <<override>>
                    +getAnimationCount() : number <<override>>
                    +addAnimation(image,delta) <<override>>
                    +getImages() : Array<GameImage> <<override>>
                    +getCurrentImage() : GameImage <<override>>
                    +init() <<override>>
                    +update(dt) <<override>>
                }
                class MultiNamedAnimation {
                    #animation : Dictionary<string, GameAnimation>
                    #name : string
                    +setName(name) <<override>
                    +getAnimation() : Animation <<override>
                    +getAnimations() : Array<GameAnimation> <<override>>
                    +setAnimation(animation) <<override>
                }

                package directional {
                    class DirectionalImage {
                        #directionX : number
                        #directionY : number
                        +setDirection(directionX,directionY) <<override>>
                        +render(ctx,x,y) <<override>>
                    }
                    class DirectionalAnimation {
                        +setDirection(directionX,directionY) <<override>>
                    }
                    class DirectionalNamedAnimation {
                        +setDirection(directionX,directionY) <<override>>
                    }
                }

                package ex_delegate {
                    class DelegateImage {
                        +constructor(baseImage)
                        #baseImage : GameImage
                        +setDirection(directionX,directionY) <<override>>
                        +setClipArea(clipX,clipY,clipWidth,clipHeight) <<override>>
                        +setSize(width,height) <<override>>
                        +setImageID(imageID) <<override>>
                        +getImageID() : number <<override>>
                        +getWidth() : number <<override>>
                        +getHeight() : number <<override>>
                        +getSourceOffsetX() : number <<override>>
                        +getSourceOffsetY() : number <<override>>
                        +getSourceWidth() : number <<override>>
                        +getSourceHeight() : number <<override>>
                        +update(dt) <<override>>
                        +render(ctx,x,y) <<override>>
                    }
                    class DelegateAnimation {
                        +constructor(baseAnimation)
                        #baseAnimation : GameAnimation
                        +setDirection(directionX,directionY) <<override>>
                        +setClipArea(clipX,clipY,clipWidth,clipHeight) <<override>>
                        +isLoop() : boolean <<override>>
                        +isEnded() : boolean <<override>>
                        +pause() <<override>>
                        +restore() <<override>>
                        +getAnimationCount() : number <<override>>
                        +addAnimation(image,delta) <<override>>
                        +getImages() : Array<GameImage> <<override>>
                        +getCurrentImage() : GameImage <<override>>
                        +init() <<override>>
                        +update(dt) <<override>>
                    }
                    class DelegateNamedAnimation {
                        +constructor(baseAnimation)
                        #baseAnimation : NamedAnimation
                        +setName(name) <<override>>
                        +setAllSize(width,height) <<override>>
                        +setAllImageID(imageID) <<override>>
                        +getAnimation() : GameAnimation <<override>>
                        +getAnimations() : Array<GameAnimation> <<override>>
                        +setAnimation(animation) <<override>>
                        +init() <<override>>
                        +update(dt) <<override>>
                        +render(ctx,x,y) <<override>>
                    }
                }

                package ex_clip {
                    class ClipImage {
                        #clipX : number
                        #clipY : number
                        #clipWidth : number
                        #clipHeight : number
                        +setClipArea(clipX,clipY,clipWidth,clipHeight) <<override>>
                        +render(ctx,x,y) <<override>>
                    }
                    class ClipAnimation {
                        +setClipArea(clipX,clipY,clipWidth,clipHeight) <<override>>
                    }
                }

                package ex_transition {
                    class TransitionalBlinkAnimation {
                        +constructor(baseAnimation,transitionTime,transitionInterval)
                        #transitionTime : number
                        #transitionInterval : number
                        #oldImageID : number
                        #transitionID : number
                        #transitionCount : number
                        +setAllImageID(imageID) <<override>>
                        +update(dt) <<overrie>>
                    }
                    class TramsitionalStripeAnimation {
                        +constructor(baseAnimation,transitionTime)
                        #transitionTime : number
                        #oldImageID : number
                        #transitionID : number
                        #transitionCount : number
                        +setAllImageID(imageID) <<override>>
                        +update(dt) <<overrie>>
                        +render(ctx,x,y) <<override>>
                    }
                }
            }
        }
    }
}

package under {
    package base {
        package screen {
            abstract GameScreen
        }
        package resource {
            abstract ResourceManager
            interface IImageManager
            interface IMusicManager
            package music {
                abstract Music
            }
            package image {
                abstract Context
                abstract GameImage
                abstract GameAnimation
                abstract NamedAnimation
                interface IClipImage
                interface IDirectionalImage
            }
        }
    }
}

GameScreen <.. JSContext : Get canvas and info
IImageManager <.. JSContext : Get image
Context <.. SingleImage : Render image
Context <.. TileImage : Render image
GameImage <.. SingleAnimation : Set and render
GameAnimation <.. MultiNamedAnimation : Set

IImageManager <.. SingleImage : Get
Context <.. ClipImage : Render image

Context <|.. JSContext
Context <|.. GLContext
Music <|.. BufferSourceMusic

ResourceManager <|.. CachedArrayManager
CachedArrayManager <|.. CachedImage
IImageManager <|.. CachedImage
CachedArrayManager <|.. CachedMusic
IMusicManager <|.. CachedMusic

GameImage <|.. SingleImage
SingleImage <|- TileImage
GameAnimation <|.. SingleAnimation
NamedAnimation <|.. MultiNamedAnimation

GameImage <|.. DelegateImage
IClipImage <|.. DelegateImage
IDirectionalImage <|.. DelegateImage
GameAnimation <|.. DelegateAnimation
IClipImage <|.. DelegateAnimation
IDirectionalImage <|.. DelegateAnimation
NamedAnimation <|.. DelegateNamedAnimation
IClipImage <|.. DelegateNamedAnimation
IDirectionalImage <|.. DelegateNamedAnimation

DelegateImage <|-- ClipImage
DelegateAnimation <|-- ClipAnimation

DelegateImage <|-- DirectionalImage
DelegateAnimation <|-- DirectionalAnimation
DelegateNamedAnimation <|-- DirectionalNamedAnimation

DelegateNamedAnimation <|-- TransitionalBlinkAnimation
DelegateNamedAnimation <|-- TramsitionalStripeAnimation

@enduml
