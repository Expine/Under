@startuml GameBaseBase

package under {
    package base {
        abstract EngineBuilder {
            {abstract} #makeEngine() : Engine
            {abstract} #makeInput() : Input
            {abstract} #makeScreen() : GameScreen
            {abstract} #makeContext() : Context
            {abstract} #makeImageManager() : IImageManager
            {abstract} #makeMusic() : Music
            {abstract} #makeMusicManager() : IMusicManager
            {abstract} #makeTimer() : Timer
            {abstract} #makeSceneManager() : SceneManager
            +build() : Engine
        }
        abstract Engine {
            #input : Input
            #screen : GameScreen
            #context : Context
            #manager : SceneManager
            #music : Music
            #timer : Timer
            {static} +debug : boolean
            +setInput(input)
            +setScreen(screen)
            +setContext(context)
            +setSceneManager(manager)
            +setMusic(music)
            +setTimer(timer)
            +execute(scene)
            {abstract} #main()
        }

        package input {
            abstract Input {
                #screen : GameScreen
                {static} +key : IKey /' Singleton '/
                {static} +mouse : IMouse /' Singleton '/
                +setScreen(screen)
                {abstract} +init()
                {abstract} +update()
            }

            interface IInput {
                {abstract} +clear()
                {abstract} +setInputEnable(enable)
                {abstract} +blockInput(code)
                {abstract} +unblockInput(code)
                {abstract} +press(code)
                {abstract} +unpress(code)
                {abstract} +isPress(code) : boolean
                {abstract} +isPressed(code) : boolean
            }

            interface IKey {
                {abstract} +a() : number
                {abstract} +zero() : number
                {abstract} +right() : number
                {abstract} +left() : number
                {abstract} +up() : number
                {abstract} +down() : number
                {abstract} +yes() : number
                {abstract} +no() : number
                {abstract} +sub() : number
            }

            interface IMouse {
                {abstract} +mRight() : number
                {abstract} +mLeft() : number
                {abstract} +mCenter() : number
                {abstract} +getMouseX() : number
                {abstract} +getMouseY() : number
            }
        }

        package screen {
            abstract GameScreen {
                +constructor(width, height)
                +gameSize : number
                +width : number
                +height : number
                {static} +it : Screen /' Singleton '/
                {abstract} +init()
                {abstract} +getTarget() : Element
                {abstract} +getCanvas() : Canvas
            }
        }

        package scene {
            abstract SceneManager {
                {static} +it : SceneManager /' Singleton '/
                {abstract} #getScene() : Scene
                +pushScene(scene)
                {abstract} +popScene()
                +replaceScene(scene)
                +update(dt)
                +render(ctx)
            }
            abstract Scene {
                {abstract} +init()
                {abstract} +update(dt)
                {abstract} +render(ctx)
            }
            abstract LayeredScene {
                +addLayer(layer)
                {abstract} +removeLayer(layer)
                +clearLayer()
                {abstract} #getLayers() : Array<Layer>
                +update(dt) <<override>>
                +render(ctx) <<override>>
            }

            package layer {
                abstract Layer {
                    +x : number
                    +y : number
                    +z : number
                    #width : number
                    #height : number
                    +setPosition(x,y,z)
                    +setSize(width,heightC)
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +render(ctx)
                }
                abstract ClipLayer {
                    #clipX : number
                    #clipY : number
                    #clipWidth : number
                    #clipHeight : number
                    +clip(clipX,clipY,clipWidth,clipHeight)
                }
            }
        }

        package timer {
            abstract Timer {
                {static} +it : Timer /' Singleton '/
                #deltaTime : number
                {abstract} +startTimer(name)
                {abstract} +stopTimer(name)
                {abstract} +getTimer(name) : number
                {abstract} +init()
                +update(dt)
                {abstract} +render(ctx,x,y)
            }
        }

        package util {
            class BaseUtil {
                {static} #interfaces : Object<string,Interface>
                {static} +implementsOf(instance,i) : boolean
                {static} +getClassName(instance) : string
            }
            class Interface {
                -_methods : Array<Method>
                -_getters : Array<string>
                -_setters : Array<string>
                #addMethodsAutomatically()
                #addMethod(method)
                +validate(instance) : boolean
            }
            class Method {
                +Method(name,number) : Method
                +name : string
                +length : number
            }
        }
    }
}

package under {
    package base {
        package resource {
            package music {
                abstract Music
            }
            package image {
                abstract Context
            }
        }

        package event {
            abstract EventManager
        }
    }
}

EngineBuilder ..> Engine : Initialize
EngineBuilder ..> Context : Set image
EngineBuilder ..> Music : Set music
Engine "1"*-- "1" Input : Own
Engine "1"*-- "1" GameScreen : Own
Engine "1"*-- "1" Context : Own
Engine "1"*-- "1" SceneManager : Own
Engine "1"*-- "1" Music : Own
Engine "1"*-- "1" Timer : Own
Engine "1"*-- "1" EventManager : Own

Input --> GameScreen : Input target

Input --> IKey : Singleton
Input --> IMouse : Singleton

SceneManager ..> Scene : Initialize

Interface ..> Method : Use

IInput <|-- IKey
IInput <|-- IMouse

Scene <|.. LayeredScene
Layer <|-- ClipLayer

@enduml
