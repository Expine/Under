@startuml GameBaseExtend

package under {
    package extend {
        package ex_input {
            abstract StateInputManager {
                #inputState : Array<number>
                #blocked : Array<boolean>
                #STATE: Enum<number>
                #target : Element
                #enable : boolean
                +init() <<override>>
                +update() <<override>>
                +clear() <<override>>
                +setInputEnable(enable) <<override>>
                +blockInput(code) <<override>>
                +unblockInput(code) <<override>>
                +press(code) <<override>>
                +unpress(code) <<override>>
                +isPress(code) : boolean <<override>>
                +isPressed(code) : boolean <<override>>
            }
            class KeyInput {
                +init() <<override>>
                +a() : number <<override>>
                +zero() : number <<override>>
                +right() : number <<override>>
                +left() : number <<override>>
                +up() : number <<override>>
                +down() : number <<override>>
                +yes() : number <<override>>
                +no() : number <<override>>
                +sub() : number <<override>>
                #onKeyDown(keyEvent)
                #onKeyUp(keyEvent)
            }
            class PreventKeyInput {
                #prevent(e)
                #onKeyDown(keyEvent) <<override>>
                #onKeyUp(keyEvent) <<override>>
            }
            class MouseInput {
                #mouseX : number
                #mouseY : number
                +init() <<override>>
                +mRight() : number <<override>
                +mLeft() : number <<override>
                +mCenter() : number <<override>
                +getMouseX() : number <<override>
                +getMouseY() : number <<override>
                #onMouseMove(mouseEvent)
                #onMouseDown(mouseEvent)
                #onMouseUp(mouseEvent)

            }
            class AllInput {
                +constructor(key,mouse)
                #keyDelegate : IKey
                #mouseDelegate : IMouse
                #mousBaseCode : number
                +init() <<override>>
                +update() <<override>>
                +clear() <<override>>
                +setInputEnable(enable) <<override>>
                +blockInput(code) <<override>>
                +unblockInput(code) <<override>>
                +press(code) <<override>>
                +unpress(code) <<override>>
                +isPress(code) : boolean <<override>>
                +isPressed(code) : boolean <<override>>
                +a() : number <<override>>
                +zero() : number <<override>>
                +right() : number <<override>>
                +left() : number <<override>>
                +up() : number <<override>>
                +down() : number <<override>>
                +yes() : number <<override>>
                +no() : number <<override>>
                +sub() : number <<override>>
                +mRight() : number <<override>
                +mLeft() : number <<override>
                +mCenter() : number <<override>
                +getMouseX() : number <<override>
                +getMouseY() : number <<override>
            }
        }
        package ex_screen {
            abstract CanvasScreen {
                +constructor(width,height)
                #canvas : Canvas
                +getTarget() : Element <<override>>
                +getCanvas() : Canvas <<override>>
            }
            class DetectiveScreen {
                +init() <<override>>
            }
            class GeneratableScreen {
                +init() <<override>>
            }
            abstract DelegateScreen {
                +constructor(delegate)
                #delegate : GameScreen
                +init() <<override>>
                +getTarget() : Element <<override>>
                +getCanvas() : Canvas <<override>>
            }
            class ScalableScreen {
                +init() <<override>>
            }
            class FitableScreen {
                +init() <<override>>
            }
        }

        package ex_timer {
            class SimpleTimer {
                #namedTimer : Dictionary<string. number>
                #namedStartTimer : Dictionary<string. number>
                +startTimer(name) <<override>>
                +stopTimer(name) <<override>>
                +getTimer(name) : number <<override>>
                +render(ctx,x,y) <<override>>
            }
            class RecordedTimer {
                #elapsedTime : number
                #recordedTime : Object<string, Array<number>>
                #maxTime : Object<string, number>
                #minTime : Object<string, number>
                #meanTime : Object<string, number>
                +update(dt) <<override>>
                +render(ctx,x,y) <<override>>
            }
        }

        package ex_util {
            class Util {
                {static} +onGround(entity) : boolean
                {static} +getUnderEntity(entity) : InfluentialEntity
                {static} +getSideEntity(entity) : InfluentialEntity
                {static} +getCollidedEntity(self, data) : InfluentialEntity
                {static} +loadFile(filePath) : string
                {static} +renderWindow(ctx,id,x,y,width,height)
                {static} +canEnd(image) : boolean
            }
        }
    }
}

package under {
    package base {
        package input {
            abstract Input
            interface IInput
            interface IKey
            interface IMouse
        }
        package resource {
            package image {
                abstract Context
            }
        }
        package timer {
            abstract Timer
        }
        package screen {
            abstract Screen
        }
    }
}

Context <.. SimpleTimer : Render text
Context <.. Util : Render window

Input <|.. AllInput
IKey <|.. AllInput
IMouse <|.. AllInput
Input <|.. StateInputManager
IInput <|.. StateInputManager
StateInputManager <|-- KeyInput
IKey <|.. KeyInput
KeyInput <|-- PreventKeyInput
StateInputManager <|.. MouseInput
IMouse <|.. MouseInput

Screen <|-- CanvasScreen
Screen <|.. DelegateScreen
CanvasScreen <|.. DetectiveScreen
CanvasScreen <|.. GeneratableScreen
DelegateScreen <|-- ScalableScreen
DelegateScreen <|-- FitableScreen

Timer <|.. SimpleTimer

@enduml
