@startuml DebugStage

package under {
    package debug {
        package d_stage {
            class DebugStage {
                +constructor(stage,stageWidth,stageHeight)
                #debugMode : boolean
                +addEntity(entity) <<override>> <<override>>
                #updateEntity(dt) <<override>>
                #updatePhysics(dt) <<override>>
                #renderBackground(ctx,shiftX,shiftY) <<override>>
                #renderEntity(ctx,shiftX,shiftY) <<override>>
            }
            package d_physics {
                class DebugWorld {
                    +constructor(world,stageWidth,stageHeight)
                    +setResponse(response) <<override>>
                    +getResponse() : CollisionResponse <<override>>
                    +addEntity(entity) <<override>>
                    +removeEntity(entity) <<override>>
                    +getCollisionData(entity) : Array<CollisionData> <<override>>
                    +getCollisionSize() : number <<override>>
                    #updateExternalForce(dt) <<override>>
                    #prepareBody(dt) <<override>>
                    #updateBody(dt) <<override>>
                    #updateBodyCleanup(dt) <<override>>
                    #initCollision(dt) <<override>>
                    #updateCollision(dt) <<override>>
                    #updateResponse(dt) <<override>>
                    #cleanup(dt) <<override>>
                }
            }
        }
    }
}

package under {
    package base {
        package input  {
            interface IKey
            interface IMouse
        }
        package resource {
            package image {
                abstract Context
            }
        }
        package stage {
            package entity {
                abstract MutableEntity
                package interface {
                    interface IColliderable
                }
            }
            package physics  {
                abstract PhysicalWorld
                package collider {
                    abstract Collider
                }
                package body {
                    abstract RigidBody
                }
            }
        }
        package timer {
            abstract Timer
        }
    }
    package debug {
        package d_base {
            abstract GameDebugger
        }
    }
    package extend {
        package ex_stage {
            abstract DelegateStage
            package ex_physics {
                class SequentialWorld
                class SplitWorld
                class RepulsionResponse
            }
        }
    }
}

package game {
    package ga_stage{
        package ga_physics {
            class UnderRepulsionResponse
        }
    }
}

Timer <... DebugStage : Register
GameDebugger <.. DebugStage : Judge and register, render
IKey <... DebugStage : Get
IMouse <... DebugStage : Get
MutableEntity <... DebugStage : Get
Collider <... DebugStage : Judge and render
IColliderable <... DebugStage : Get
RigidBody <... DebugStage : Get
Context <... DebugStage : Render
PhysicalWorld <.. DebugStage : Get
DebugWorld <.. DebugStage : Get

Timer <.. DebugWorld : Register
UnderRepulsionResponse <.. DebugWorld : Generate
RepulsionResponse <.. DebugWorld : Generate
SequentialWorld <.. DebugWorld : Generate
SplitWorld <.. DebugWorld : Generate

DelegateStage <|.. DebugStage
PhysicalWorld <|.. DebugWorld

@enduml
