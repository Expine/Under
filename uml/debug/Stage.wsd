@startuml DebugStage

package under {
    package debug {
        package d_stage {
            class DebugStage {
                +constructor(stage,stageWidth,stageHeight)
                #stage : Stage
                +setBackground(back) <<override>> <<override>>
                +setCamera(camera) <<override>> <<override>>
                +setPhysicalWorld(physic) <<override>> <<override>>
                +setFactory(factory) <<override>> <<override>>
                +getCamera() : Camera <<override>> <<override>>
                +getPhysicalWorld() : PhysicalWorld <<override>> <<override>>
                #getFactory() : EntityFactory <<override>> <<override>>
                +setEnable(enable) <<override>> <<override>>
                +getEnable() : boolean <<override>> <<override>>
                +getStageWidth() : number <<override>> <<override>>
                +getStageHeight() : number <<override>> <<override>>
                +addEntity(entity) <<override>> <<override>>
                +addEntityByID(id,deploy,init) <<override>> <<override>>
                +removeEntity(entity) <<override>>
                #removeEntityImmediately(entity) <<override>>
                +getEntities() : Array<Entity> <<override>>
                +init() <<override>>
                #updateEntity(dt) <<override>>
                #updatePhysics(dt) <<override>>
                #updateBackground(dt) <<override>>
                #updateCemera(dt) <<override>>
                #renderBackground(ctx,shiftX,shiftY) <<override>>
                #renderEntity(ctx,shiftX,shiftY) <<override>>
                #renderWorld(ctx,shiftX,shiftY) <<override>>
            }
            package d_physics {
                class DebugWorld {
                    +setResponse(response) <<override>>
                    +getResponse() : CollisionResponse <<override>>
                    +addEntity(entity) <<override>>
                    +removeEntity(entity) <<override>>
                    +getCollisionData(entity) : Array<CollisionData> <<override>>
                    +getCollisionSize() : number <<override>>
                    #updateExternalForce(dt) <<override>>
                    #prepareBody(dt) <<override>>
                    #updateBody(dt) <<override>>
                    #updateBodyCleanup(dt) <<override>>
                    #initCollision(dt) <<override>>
                    #updateCollision(dt) <<override>>
                    #updateResponse(dt) <<override>>
                    #cleanup(dt) <<override>>
                }
            }
        }
    }
}

package under {
    package base {
        package input  {
            interface IMouse
        }
        package resource {
            package image {
                abstract Context
            }
        }
        package stage {
            abstract Stage
            package entity {
                abstract MutableEntity
                package interface {
                    interface IColliderable
                }
            }
            package physics  {
                abstract PhysicalWorld
                package collider {
                    abstract Collider
                }
                package body {
                    abstract RigidBody
                }
            }
        }
        package timer {
            abstract Timer
        }
    }
    package debug {
        package d_base {
            abstract GameDebugger
        }
    }
}

Timer <... DebugStage : Register
GameDebugger <.. DebugStage : Judge
IMouse <... DebugStage : Get
MutableEntity <... DebugStage : Get
Collider <... DebugStage : Judge and render
IColliderable <... DebugStage : Get
RigidBody <... DebugStage : Get
Context <... DebugStage : Render

Timer <.. DebugWorld : Register

Stage <|.. DebugStage
PhysicalWorld <|.. DebugWorld

@enduml
