@startuml EntityBase
package under {
    package base {
        package stage {
            package entity {
                abstract Entity {
                    +x : number
                    +y : number
                    +z : number
                    +width : number
                    +height : number
                    +stage : Stage
                    +setStage(stage)
                    +setPosition(x,y,z)
                    +setSize(width,height)
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +render(ctx,shiftX,shiftY)
                }
                abstract ImagedEntity {
                    #image : GameImage
                    +setImage(image)
                    +getImage() : Image
                    +setSize(width,height) <<override>>
                    +init() <<override>>
                    +update(dt) <<override>>
                    +render(ctx,shiftX,shiftY) <<override>>
                }
                abstract InfluentialEntity {
                    +material : Material
                    +collider : Collider
                    +setMaterial(material)
                    +setCollider(collider)
                }
                abstract ImmutableEntity {

                }
                abstract MutableEntity {
                    +body : RigidBody
                    +directionX : number
                    +directionY : number
                    +setRigidBody(body)
                    +deltaMove(dx,dy)
                }
                abstract AutonomyEntity {
                    +addAI(ai,priotiy)
                    {abstract} +removeAI(ai)
                    {abstract} +updateAI(dt)
                    {abstract} +applyAI(dt)
                    +update(dt) <<override>>
                }

                package interface {
                    interface IBreakable {
                        {abstract} +destroy()
                    }
                    interface IDamagable {
                        {abstract} +getHP() : number
                        {abstract} +damage(damage)
                    }
                    interface IPlayable {
                        {abstract} +getCameraX() : number
                        {abstract} +getCameraY() : number
                        {abstract} +isGameOver() : boolean
                    }
                    interface IEventEntity {
                        {abstract} +setEvent(event)
                        {abstract} +getEvent() : GameEvent
                        {abstract} +fire()
                    }
                }
            }
            package physics {
                package collider {
                    abstract Collider {
                        #aabb : AABB
                        +collisions : Array<CollisionData>
                        +response : boolean
                        +enable : boolean
                        #entity : Entity
                        #cleared : boolean
                        +init()
                        +clear()
                        +setEntity(entity)
                        +setAABB(aabb)
                        +getAABB() : AABB
                        +addCollision(collision)
                        +isResponse(collider) : boolean
                        {abstract} +isInCollider(x,y) : boolean
                        {abstract} +isCollision(collider,data)
                        +isCollisionRoughly(collider)
                        {abstract} +fixBound(startX,startY,endX,endY)
                        {abstract} +update()
                        {abstract} +render(ctx,shiftX,shiftY)
                    }
                    abstract AABB {
                        +startX() : number <<getter>>
                        +startY() : number <<getter>>
                        +endX() : number <<getter>>
                        +endY() : number <<getter>>
                        +update(startX,startY,endX,endY,entity)
                    }
                    abstract CollisionData {
                        +CollisionData(colliding,collided,nx,ny,px,pydepth) : CollisionData
                        +colliding : MutableEntity
                        +collided : InfluentialEntity
                        +nx : number
                        +ny : number
                        +px : number
                        +py : number
                        +depth : number
                        #priorityVal : number
                        +priority() : number <<getter>>
                        +register(colliding,collided,nx,ny,px,pydepth)
                        +init()
                        {abstract} #calcPriority() : number
                    }
                }
                package material {
                    abstract Material {
                        {abstract} +mass() : number <<getter>>
                        {abstract} +e() : number <<getter>>
                        {abstract} +mu() : number <<getter>>
                    }
                }
                package body {
                    abstract RigidBody {
                        +diffX : number
                        +diffY : number
                        +isFixX : boolean
                        +isFixY : boolean
                        +enable : boolean
                        #entity : MutableEntity
                        +material : RigidMaterial
                        +velocityX() : number <<getter>>
                        +velocityY() : number <<getter>>
                        +accelerationX() : number <<getter>>
                        +accelerationY() : number <<getter>>
                        +setEntity(entity)
                        +setMaterial(material)
                        +reset()
                        {abstract} +setNextAddVelocity(vx,vy)
                        {abstract} +enforce(forceX, forceY)
                        {abstract} +init()
                        {abstract} +prepare(dt)
                        {abstract} #updateInfor(dt)
                        {abstract} #updateVeocity(dt)
                        {abstract} #updateEntity(dt)
                        +update(dt)
                        {abstract} +cleanup(dt)
                    }
                    abstract RigidMaterial {
                        +velocityX : number
                        +velocityY : number
                        +accelerationX : number
                        +accelerationY : number
                        +reset()
                        {abstract} +k() : number <<getter>>
                        {abstract} +frictionX() : number <<getter>>
                        {abstract} +frictionY() : number <<getter>>
                        {abstract} +gravityScale() : number <<getter>>
                    }
                }
            }
            package ai {
                abstract AI {
                    #entity : AutonomyEntity
                    +setEntity(entity)
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +apply(dt) : boolean
                }
                abstract StateAI {
                    {abstract} +getState() : State
                    {abstract} +getStateID() : Object
                    {abstract} +setState(state,id)
                    +changeState(id)
                    +update(dt) <<override>>
                    +apply(dt) : boolean <<override>>
                }
                abstract State {
                    #entity : AutonomyEntity
                    #ai : StateAI
                    #canRendering : boolean
                    +setEntity(entity)
                    +setAI(ai)
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +apply(dt) : boolean
                    {abstract} +render(ctx.shiftX,shiftY)
                }
            }
        }
    }
}

package under {
    package base {
        package resource {
            package image {
                abstract GameImage
            }
        }
        package stage {
            abstract Stage
        }
    }
}

Stage <-- Entity : Own
GameImage <. ImagedEntity : Init, update and render
material "1" ..o "1" InfluentialEntity : Own
Collider <. InfluentialEntity : Init
Collider <.. MutableEntity : Update
RigidBody <. MutableEntity : Init
AI <.. AutonomyEntity : Init

Entity <-- Collider : Own
Collider ..> AABB : Get
Collider "1" o.. "*" CollisionData : Own
RigidBody "1" o.. "1" RigidMaterial : Get and reset
RigidBody --> MutableEntity : Own

StateAI ..> State : Init
AutonomyEntity <-- AI : Own
StateAI <-- State : Own
AutonomyEntity <-- State : Own

Entity <|-- ImagedEntity
ImagedEntity <|-- InfluentialEntity
InfluentialEntity <|-- ImmutableEntity
InfluentialEntity <|-- MutableEntity
MutableEntity <|-- AutonomyEntity

IBreakable <|-- IDamagable

AI <|-- StateAI

@enduml
