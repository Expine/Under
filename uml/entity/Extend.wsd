@startuml EntityExtend
package under {
    package extend {
        package ex_stage {
            package ex_entity {
                class TileObject
                class Obstacle
                class AIListedObject {
                    #ai : Array<AI>
                    +addAI(ai,priotiy) <<override>>
                    +removeAI(ai) <<override>>
                    +updateAI(dt) <<override>>
                    +applyAI(dt) <<override>>
                }
                package ex_character {
                    class Character {
                        #hp : number
                        +setHP(hp)
                        +getHP() : number <<override>>
                        +damage() : number <<override>>
                        +destroy() <<override>>
                    }
                    class StateCharacter {
                        #state : State
                        +applyAI(dt) <<override>>
                        +render(ctx,shiftX,shiftY) <<override>>
                    }
                    class Enemy
                    class Player {
                        #invincible : number
                        +damage(damage) <<override>>
                        +getCameraX() : number <<override>>
                        +getCameraY() : number <<override>>
                        +isGameover() : boolean <<override>>
                        +update(dt) <<override>>
                        +render(ctx,shiftX,shiftY) <<override>>
                    }
                }
                package ex_fire {
                    class ImmutableEvent {
                        #event : GameEvent
                        #collided : boolean
                        #eventCollider : Collider
                        +setEvent(event) <<override>>
                        +getEvent() : GameEvent <<override>>
                        +fire() <<override>>
                        +getCollider() : Collider <<override>>
                        +init() <<override>>
                        +update(dt) <<override>>
                    }
                }
                package ex_happen {
                    package ex_attack {
                        class AttackObject {
                            +constructor(lifespan)
                            #lifespan : number
                            +destroy() <<override>>
                            +update(dt) <<override>>
                        }
                    }
                    abstract PossessedObject {
                        #owner : Entity
                        +setOwner(owner)
                    }
                }
                package ex_object {
                    class DoorObject {
                        #transtion : string
                        #isReplace : boolean
                        #popNumber : number
                        #doorCollider : Collider
                        #isTransitioning : boolean
                        +setCollider(collider)
                        +getCollider() : Collider <<override>>
                        +init() <<override>>
                        +update(dt) <<override>>
                    }
                    class SignObject {
                        #signImage : GameImage
                        #signX : number
                        #signY : number
                        #signCollider : Collider
                        #isShowSign : boolean
                        #currentHeight : number
                        #speed : number
                        +setSign(signImage,x,y)
                        +setCollider(collider)
                        +getCollider() : Collider <<override>>
                        +init() <<override>>
                        +update(dt) <<override>>
                        +render(ctx,shiftX,shiftY) <<override>>
                    }
                }
            }
        }
    }
}

package under {
    package base {
        package ai {
            abstract AI
            abstract StateAI
            package state {
                abstract State
            }
        }
        package stage {
            abstract Stage
            package entity {
                abstract Entity
                abstract ImagedEntity
                abstract ImmutableObject
                abstract MutableObject
                abstract AutonomyObject
                package interface {
                    interface IDamagable
                    interface IBreakable
                    interface IPlayable
                    interface IEventEntity
                    interface IColliderable
                }
            }
        }
    }
}

AI <.. AIListedObject : Update and apply
Stage <.. Character : Destroy
StateAI <.. StateCharacter : Get state
State <.. StateCharacter : Render

ImmutableObject <|.. TileObject
MutableObject <|.. Obstacle
AutonomyObject <|.. AIListedObject

AIListedObject <|-- Character
IDamagable <|.. Character
Character <|-- StateCharacter
StateCharacter <|-- Player
IPlayable <|.. Player
Character <|-- Enemy

Entity <|.. ImmutableEvent
IEventEntity <|.. ImmutableEvent
IColliderable <|.. ImmutableEvent

AIListedObject <|-- PossessedObject
AIListedObject <|.. AttackObject
IBreakable <|.. AttackObject

ImagedEntity <|.. DoorObject
IColliderable <|.. DoorObject
ImagedEntity <|.. SignObject
IColliderable <|.. SignObject

@enduml
