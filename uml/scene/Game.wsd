@startuml SceneGame

package game {
    package ga_layer {
        class UILayer {
            #stage : StageManager
            #currentStage : Stage
            #player : IDamagable
            #playerHP : number
            #uiAnimation : NamedAnimation
            +init() <<override>>
            +update(dt) <<override>>
            +render(ctx) <<override>>
        }
    }
    package ga_scene {
        class GameScene {
            #stageManager : StageManager
            #eventManager : EventManager
            #player : IPlayable
            #gameover : boolean
            #initStage()
            +init() <<override>>
            +update(dt) <<override>>
            +render(ctx) <<override>>
        }
    }
}

package under {
    package base {
        package event {
            abstract EventManager
        }
        package input {
            abstract IKey
        }
        package resource {
            interface IIMageManager
            package image {
                abstract NamedAnimation
            }
        }
        package screen {
            abstract GameScreen
        }
        package scene {
            abstract SceneManager
            package layer {
                abstract Layer
            }
        }
        package stage {
            abstract StageManager
            abstract Stage
            package entity {
                package interface {
                    interface IPlayable
                }
            }
        }
    }

    package extend {
        package ex_event {
            class QueueEventManager
        }
        package ex_resource {
            package ex_image {
                class TileImage
                class SingleAnimation
                class MultiNamedAnimation
            }
        }
        package ex_scene {
            class BaseLayeredScene
            package ex_layer {
                class GameoverLayer
            }
        }
        package ex_stage {
            class StackStageManager
            package ex_entity  {
                package ex_respawn {
                    abstract RespawnEntity
                }
            }
        }
    }
}

package game {
    package ga_scene {
        class TitleScene
    }
    package ga_stage {
        class UnderStageParser
    }
}

UnderStageParser <.. GameScene  : Generate
StackStageManager <.. GameScene : Generate
QueueEventManager <.. GameScene : Generate
UILayer <.. GameScene  : Generate
GameoverLayer <.. GameScene  : Generate
TitleScene <.. GameScene  : Generate
IPlayable <.. GameScene  : Judge gameover
StageManager <.. GameScene : Update and render, get stage
Stage <.. GameScene : Get player
EventManager <.. GameScene : Update and render
IKey <.. GameScene : Get key
SceneManager <.. GameScene : Replcae
GameScreen <..GameScene : Get size
RespawnEntity <.. GameScene : Respawn
SingleAnimation <.. GameScene : Generate
TileImage <.. GameScene : Generate
IIMageManager <.. GameScene : Load

Stage <.. UILayer : Get player
StageManager <.. UILayer : Get
IIMageManager <.. UILayer : Load
MultiNamedAnimation <.. UILayer : Generate
SingleAnimation <.. UILayer : Generate
TileImage <.. UILayer : Generate
NamedAnimation <.. UILayer : Configure and update, render
IPlayable <.. UILayer : Judge

BaseLayeredScene <|-- GameScene
Layer <|-- UILayer

@enduml
