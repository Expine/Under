@startuml StageBase

package under {
    package base {
        package stage {
            abstract StageManager {
                {static} +it : StageManager
                #parser : StageParser
                #width : number
                #height : number
                +setStageParser(parser)
                +setStageSize(width,height)
                {abstract} +pushStage(stageName)
                +replaceStage(stageName)
                {abstract} +popStage() : Stage
                {abstract} +getStage() : STage
                +update(dt)
                +render(ctx,shiftX,shiftY)
            }
            abstract Stage {
                +constructor(stageWidth,stageHeight)
                #stageWidth : number
                #stageHeight : number
                #enable : boolean
                #back : Background
                #camera : Camera
                #physic : PhysicalWorld
                #factory : EntityFactory
                +setBackground(back)
                +setCamera(camera)
                +setPhysicalWorld(physic)
                +setFactory(factory)
                +getPhysicalWorld() : PhysicalWorld
                +getCamera() : Camera
                #getFactory() : EntityFactory
                +setEnable(enable)
                +getEnable() : boolean
                +getStageWidth() : number
                +getStageHeight() : number
                +addEntity(entity)
                +addEntityByID(id,deploy,init)
                {abstract} +removeEntity(entity)
                {abstract} #removeEntityImmediately(entity)
                {abstract} +getEntities() : Array<Entity>
                {abstract} #updateEntity(dt)
                {abstract} #updatePhysics(dt)
                {abstract} #updateBackground(dt)
                {abstract} #updateCemera(dt)
                {abstract} +init()
                +update(dt)
                {abstract} #renderBackground(ctx,shiftX,shiftY)
                {abstract} #renderEntity(ctx,shiftX,shiftY)
                {abstract} #renderWorld(ctx,shiftX,shiftY)
                +render(ctx,shiftX,shiftY)
            }
            package parser {
                abstract StageParser {
                    {abstract} +parse(filePath,width,height) : Stage
                }
                abstract EntityBuilder {
                    {abstract} +build(deploy,json) : Entity
                }
                abstract ImageBuilder {
                    {abstract} +build(root,image) : GameImage
                }
                abstract EntityFactory {
                    {abstract} +createEntity(id,deploy): Entity
                }
            }
            package back {
                abstract Background {
                    {abstract} +init()
                    {abstract} +update(dt)
                    {abstract} +render(ctx,shiftX,shiftY,screenWidth,screenHeight)
                }
            }
            package camera {
                abstract Camera {
                    +constructor(screenWidth,screenHeight) : Camera
                    +cameraX : number
                    +cameraY : number
                    +baseX : number
                    +baseY : number
                    +screenWidth : number
                    +screenHeight : number
                    +maxWidth : number
                    +maxHeight : number
                    +setScreenSize(screenWidth,screenHeight)
                    +setMaxSize(maxWidth,maxHeight)
                    {abstract} +init(x,y)
                    {abstract} +update(x.y,dt)
                }
            }
            package physics {
                abstract PhysicalWorld {
                    +constructor(gravity) : PhysicalWorld
                    #gravity : number
                    #response : CollisionResponse
                    +setResponse(response)
                    +getResponse() : CollisionResponse
                    {abstract} +addEntity(entity)
                    {abstract} +removeEntity(entity)
                    {abstract} +getCollisionData(entity) : Array<CollisionData>
                    {abstract} +getCollisionSize() : number
                    {abstract} #updateExternalForce(dt)
                    {abstract} #prepareBody(dt)
                    {abstract} #updateBody(dt)
                    {abstract} #updateBodyCleanup(dt)
                    {abstract} #initCollision(dt)
                    {abstract} #updateCollision(dt)
                    {abstract} #updateResponse(dt)
                    {abstract} #cleanup(dt)
                    +update(dt)
                    {abstract} +render(ctx,shiftX,shiftY)
                }
                abstract CollisionResponse {
                    {abstract} +collisionResponse(data,dt)
                }
            }
        }
    }
}

package under {
    package base {
        package stage {
            package entity {
                abstract Entity
                abstract InfluentialEntity
            }
        }
    }
}

Stage "1" *-- "1" Background : Own
Stage "1" *-- "1" Camera : Own and get
Stage "1" *-- "1" PhysicalWorld : Own
Stage "1" *-- "*" Entity : Should own(init)
Stage "1" *-- "1" EntityFactory : Create entity
PhysicalWorld "1"*--"*" InfluentialEntity : Should own
PhysicalWorld "1"*--"1" CollisionResponse : Own

@enduml
