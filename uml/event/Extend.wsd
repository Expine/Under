@startuml EventExtend

package under {
    package extend {
        package ex_event {
            class QueueEventManager {
                #events : Array<GameEvent>
                #runningEvents : Array<GameEvent>
                +register(event) <<override>>
                +unregister(event) <<override>>
                +clear() <<override>>
                +next() <<override>>
                +delete(event) <<override>>
                +getRunningEvents() : Array<GameEvent> <<override>>
                #removeEvents(removes) <<override>>
            }
            package ex_evcommon {
                package inputorder {
                    abstract InputOrder {
                        {abstract} +init()
                        {abstract} +destruct()
                        {abstract} +update(dt)
                    }
                    class DirectionInputOrder {
                        +constructor(time,directionX,directionY)
                        #time : number
                        #remainingTime : number
                        #directionX : number
                        #directionY : number
                        +init() <<override>>
                        +destruct() <<override>>
                        +update(dt) <<override>>
                    }
                    class WaitInputOrder {
                        +constructor(time)
                        #time : number
                        #remainingTime : number
                        +init() <<override>>
                        +update(dt) <<override>>
                    }
                    class LoopInputOrder {
                        +constructor(loopNumber)
                        #loopNumber : number
                        #orders : Array<InputOrder>
                        #orderIndex : number
                        +addOrder(order)
                        +init() <<override>>
                        +update(dt) <<override>>
                    }
                }
                class AutoInputEvent {
                    #orders : Array<InputOrder>
                    #nextOrderNumber : number
                    +addOrder(order)
                    +init() <<override>>
                    +destruct() <<override>>
                    +update(dt) <<override>>
                }
                class DelayEvent {
                    +constructor(delay)
                    #delay : number
                    #count : number
                    +update(dt) <<override>>
                }
                class DeleteEvent {
                    +constructor(name)
                    #name : string
                    +init() <<override>>
                }
                class ImageEvent {
                    +constructor(name,x,y,image)
                    #x : number
                    #y : number
                    #image : GameImage
                    +init() <<override>>
                    +update(dt) <<override>>
                    +render(ctx) <<override>>
                }
                class SequentialEvent {
                    #events : Array<GameEvent>
                    #nextEventNumber : number
                    #runningEvents : Array<GameEvent>
                    +addEvent(event)
                    +next() <<override>>
                    +delete(event) <<override>>
                    +getRunningEvents() : Array<GameEvent> <<override>>
                    +init() <<override>>
                    +destruct() <<override>>
                    +update(dt) <<override>>
                    +render(ctx) <<override>>
                }
            }
        }
    }
}

package under {
    package base {
        package input {
            interface IKey
        }
        package resource {
            package image {
                abstract GameImage
            }
        }
        package event {
            abstract EventManager
            interface IEventOperator
            interface IEventRegister
            package evcommon {
                abstract GameEvent
                abstract NamedEvent
            }
        }
    }
}

GameEvent "1" ..o "*" QueueEventManager : Manage

IKey <... DirectionInputOrder : Press and unpress
IKey <... AutoInputEvent : Enable
AutoInputEvent ..> InputOrder : Manage
IEventOperator <.. AutoInputEvent : Next
IEventOperator <.. DelayEvent : Next
IEventOperator <.. DeleteEvent : Get and next
NamedEvent <.. DeleteEvent : Get
GameImage <.. ImageEvent : Update and redner

EventManager <|... QueueEventManager
IEventRegister <|... QueueEventManager
IEventOperator <|... QueueEventManager

InputOrder <|.. DirectionInputOrder
InputOrder <|.. WaitInputOrder
GameEvent <|.. AutoInputEvent
GameEvent <|.. DelayEvent
GameEvent <|.. DeleteEvent
NamedEvent <|.. ImageEvent
GameEvent <|.. SequentialEvent
IEventOperator <|.. SequentialEvent

@enduml
